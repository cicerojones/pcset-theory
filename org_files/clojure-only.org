* 
** 
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn list+ [n lst]
  (map (fn [x] (+ n x)) lst))
#+END_SRC

#+RESULTS:
: #'user/list+

#+BEGIN_SRC clojure :session cl-to-cloj
(list+ 3 [1 2 3])
#+END_SRC

#+RESULTS:
| 4 | 5 | 6 |

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn Tn1-11 [pcset]
  (loop [n 12
         acc ()
         ]
    (if (< n 0)
      acc
      (recur (dec n) (conj acc (list+ n pcset))))))


#+END_SRC

#+RESULTS:
: #'user/Tn1-11

#+BEGIN_SRC clojure :session cl-to-cloj
(Tn1-11 '(0 4 7))
#+END_SRC

#+RESULTS:
|  0 |  4 |  7 |
|  1 |  5 |  8 |
|  2 |  6 |  9 |
|  3 |  7 | 10 |
|  4 |  8 | 11 |
|  5 |  9 | 12 |
|  6 | 10 | 13 |
|  7 | 11 | 14 |
|  8 | 12 | 15 |
|  9 | 13 | 16 |
| 10 | 14 | 17 |
| 11 | 15 | 18 |
| 12 | 16 | 19 |

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn mod12 [lst]
(map #(mod % 12) lst))

(mod12 [24 28 31])
#+END_SRC

#+RESULTS:
: #'user/mod12(0 4 7)

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn mod12-all [lst-of-lsts]
(map mod12 lst-of-lsts))


#+END_SRC

#+RESULTS:
: #'user/mod12-all((0 4 7) (0 4 7))


#+BEGIN_SRC clojure
(mod12-all [[24 28 31] [36 40 43]])
#+END_SRC

#+RESULTS:
| 0 | 4 | 7 |
| 0 | 4 | 7 |

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn TnI-all [lol-of-pcsets]
(map #(mod12-all (Tn1-11 %)) lol-of-pcsets))


#+END_SRC

#+RESULTS:
: #'user/TnI-all(((0 1 2) (1 2 3) (2 3 4) (3 4 5) (4 5 6) (5 6 7) (6 7 8) (7 8 9) (8 9 10) (9 10 11) (10 11 0) (11 0 1) (0 1 2)) ((0 4 7) (1 5 8) (2 6 9) (3 7 10) (4 8 11) (5 9 0) (6 10 1) (7 11 2) (8 0 3) (9 1 4) (10 2 5) (11 3 6) (0 4 7)))

#+BEGIN_SRC clojure
(TnI-all [[0 1 2] [0 4 7]])
#+END_SRC

#+RESULTS:
| (0 1 2) | (1 2 3) | (2 3 4) | (3 4 5)  | (4 5 6)  | (5 6 7) | (6 7 8)  | (7 8 9)  | (8 9 10) | (9 10 11) | (10 11 0) | (11 0 1) | (0 1 2) |
| (0 4 7) | (1 5 8) | (2 6 9) | (3 7 10) | (4 8 11) | (5 9 0) | (6 10 1) | (7 11 2) | (8 0 3)  | (9 1 4)   | (10 2 5)  | (11 3 6) | (0 4 7) |

*** 
 #+BEGIN_SRC clojure :session cl-to-cloj :results output
(println (frequencies [3 1 2 0 2 4 0 0 0 0 0 0]))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [v [3 1 2 0 2 4 0 0 0 0 0 0]]
                            (for [n (range 12)]
                              (get (frequencies v ) n 0)))
 #+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn counting [v]
  (for [n (range 12)]
    (get (frequencies v ) n 0)))
#+END_SRC  

#+RESULTS:
: #'user/counting

#+BEGIN_SRC clojure :session cl-to-cloj
(counting '(3 1 2 0 2 4 0 0 0 0 0 0))
#+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(repeat 4 6)
 #+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn pc-compari [n1 n2]
  (cond (<= n1 n2) (cond (= n1 n2) 0
                         :else (inc (pc-compari n1 (dec n2))))
        :else (cond (= (mod n1 12) n2) 0
                    :else (inc (pc-compari (inc n1) n2)))))
#+END_SRC

#+RESULTS:
: #'user/pc-compari


#+BEGIN_SRC clojure :session cl-to-cloj
(pc-compari 0 12)
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn rec-do-pc-compari [lst1 lst2]
  (letfn [(rec [l1 l2]
                   (cond (empty? l1) ()
                         :else (cons (pc-compari (first l1) (first l2))
                                     (rec (rest l1) l2))))]
    (cond (empty? lst2) ()
          :else (cons (rec lst1 lst2)
                      (rec-do-pc-compari lst1 (rest lst2))))))
#+END_SRC

#+RESULTS:
: #'user/rec-do-pc-compari



#+BEGIN_SRC clojure :session cl-to-cloj
(rec-do-pc-compari '(0 1 2) '(0 1 3))
#+END_SRC
** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(defn create-lewin-vector [set1 set2]
  (counting (flatten (rec-do-pc-compari set1 set2))))
 #+END_SRC

 #+RESULTS:
 : #'user/create-lewin-vector

#+BEGIN_SRC clojure
(create-lewin-vector '(0 1) '(0 1 2))
#+END_SRC

#+RESULTS:
| 2 | 2 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |

*** 
  #+BEGIN_SRC clojure
(counting (flatten (rec-do-pc-compari '(0 1) '(0 1 2))))
  #+END_SRC
*** 
  #+BEGIN_SRC clojure :session cl-to-cloj
;;(defn clean-profile [single-vector]
;;(sort (flatten (rec-do-pc-compari ))))
  #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
;; defined later--don't call here
;; (create-lewin-vector ' (0 1) ' (0 1 2))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj :results output
(println  (let [v (create-lewin-vector '(0 1) '(0 1 2))]
     (for [n (range 12)]
	  (repeat (nth v n) n))))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(flatten (let [v (create-lewin-vector '(0 1) '(0 1 2))]
     (for [n (range 12)]
	  (repeat (nth v n) n))))
 #+END_SRC

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn clean-profile [single-vector]
  (flatten (for [n (range 12)]
             (repeat (nth single-vector n) n))))
#+END_SRC

#+RESULTS:
: #'user/clean-profile

#+BEGIN_SRC clojure :session cl-to-cloj
(clean-profile '(0 1 1 2 3 3 3 5 7 0 10 11))
#+END_SRC
*** 
 #+BEGIN_SRC clojure :results output
(println (concat '((0 1) ((0 3) (0 4) ((0 4 5) (0 4 6))) (((0 1 2 4) (0 1 3 5)) ((0 1 4 6) (0 2 5 7))))))
 #+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn de-nestc [x]
  (letfn [(denester [inner-x acc]
            (let [coll inner-x]
              (cond (empty? coll) acc
                    (not (counted? (first coll))) (cons coll acc)
                    :else (denester (first coll) (denester (rest coll) acc)))))]
    (denester x ())))



#+END_SRC

#+RESULTS:
: #'user/de-nestc

#+BEGIN_SRC clojure
(de-nestc '((0 1) ((0 3) (0 4) ((0 4 5) (0 4 6))) (((0 1 2 4) (0 1 3 5)) ((0 1 4 6) (0 2 5 7)))))
#+END_SRC

#+BEGIN_SRC clojure
(de-nestc '(([24 25 28] [24 25 40] [24 25 52] [24 25 64]) ([24 37 28] [24 37 40] [24 37 52] [24 37 64]) ([24 49 28] [24 49 40] [24 49 52] [24 49 64]) ([24 61 28] [24 61 40] [24 61 52] [24 61 64])))
#+END_SRC  
*** 
 #+BEGIN_SRC clojure
(def trip014 (list '(([24 25 28] [24 25 40] [24 25 52] [24 25 64]) ([24 37 28] [24 37 40] [24 37 52] [24 37 64]) ([24 49 28] [24 49 40] [24 49 52] [24 49 64]) ([24 61 28] [24 61 40] [24 61 52] [24 61 64]))))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :results output
(println (first trip014))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :results output
(println (de-nestc (first trip014)))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :results output
(println (apply concat (first trip014)))
 #+END_SRC


** 
#+BEGIN_SRC clojure
(defn set-up [pcset1 lst-of-pcsets]
  (loop [pc1 pcset1
         pcs lst-of-pcsets
         acc ()]
    (if (empty? pcs)
      acc
      (recur pc1 (rest pcs) (cons pc1 (cons (first pcs) acc))))))


#+END_SRC

#+RESULTS:
: #'user/set-up((0 1 2) (0 1 2 4 6) (0 1 2) (0 4) (0 1 2) (0 1 2))

#+BEGIN_SRC clojure
(set-up '(0 1 2) '((0 1 2) (0 4) (0 1 2 4 6)))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |   |   |
| 0 | 1 | 2 | 4 | 6 |
| 0 | 1 | 2 |   |   |
| 0 | 4 |   |   |   |
| 0 | 1 | 2 |   |   |
| 0 | 1 | 2 |   |   |

*** 
 #+BEGIN_SRC clojure
(partition 2 '(0 1 2 3 4 5 6 7 8 9))
 #+END_SRC

 #+RESULTS:
 | 0 | 1 |
 | 2 | 3 |
 | 4 | 5 |
 | 6 | 7 |
 | 8 | 9 |

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn make-pairs-from-list [lst]
(partition 2 lst))


#+END_SRC

#+RESULTS:
: #'user/make-pairs-from-list((0 1) (2 3) (4 5) (6 7) (8 9))

#+BEGIN_SRC clojure
(make-pairs-from-list '(0 1 2 3 4 5 6 7 8 9))
#+END_SRC

#+RESULTS:
| 0 | 1 |
| 2 | 3 |
| 4 | 5 |
| 6 | 7 |
| 8 | 9 |
*** 
 #+BEGIN_SRC clojure
(defn jack-rec [lst1 lst2]
(letfn [(jackrec [inner-lst1 inner-lst2]
(cond (empty? l1) acc)))))

 #+END_SRC

 #+RESULTS:

 #+BEGIN_SRC clojure
(jack-rec '(0 1) '((0 1) (0 3) (0 1 4) (0 1 5) (0 1) (0 3)))
 #+END_SRC

*** 
 #+BEGIN_SRC clojure
(defn jack-b [lst1 lst2]
(loop [l1 lst1
       l2 lst2
       acc ()]
  (if (empty? l2) 
      acc
      (recur l1 (rest l2) (cons (list (first l1) (first l2)) acc)))))
 #+END_SRC

 #+RESULTS:
 : #'user/jack-b


*** 
 #+BEGIN_SRC clojure
(last '((0 1)))
 #+END_SRC
** 
#+BEGIN_SRC clojure
(defn help-make-pairs [[head & tail]]
(letfn [(rec [inner-tail]
          (cond (empty? inner-tail) ()
                :else (cons (list head (first inner-tail))
                            (rec (rest inner-tail)))))]
  (rec (concat (list head) tail))))


#+END_SRC

#+RESULTS:
: #'user/help-make-pairs

#+BEGIN_SRC clojure
(help-make-pairs '(0 1 2 3 4))
#+END_SRC				   

#+RESULTS:
| 0 | 0 |
| 0 | 1 |
| 0 | 2 |
| 0 | 3 |
| 0 | 4 |

** 
#+BEGIN_SRC clojure
(defn make-comb-pairs-from-flat-list [coll]
  (cond (empty? coll) ()
        :else (concat (help-make-pairs coll)
                      (make-comb-pairs-from-flat-list (rest coll)))))
#+END_SRC

#+RESULTS:
: #'user/make-comb-pairs-from-flat-list

#+BEGIN_SRC clojure :results output
(make-comb-pairs-from-flat-list [0 1 2 3 4 5])
#+END_SRC

#+BEGIN_SRC clojure :results output
(println (make-comb-pairs-from-flat-list [0 1 2 3 4 5]))
#+END_SRC

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn prepare-set-up-Tn-equivalent-Ys-with-X [pcset1 pcset2]
  (set-up pcset1 (first (TnI-all (list pcset2)))))
#+END_SRC

#+RESULTS:
: #'user/prepare-set-up-Tn-equivalent-Ys-with-X

 #+BEGIN_SRC clojure :session cl-to-cloj
(prepare-set-up-Tn-equivalent-Ys-with-X  '(0 1 3) '(0 1))
 #+END_SRC

 #+RESULTS:
 |  0 |  1 | 3 |
 |  0 |  1 |   |
 |  0 |  1 | 3 |
 | 11 |  0 |   |
 |  0 |  1 | 3 |
 | 10 | 11 |   |
 |  0 |  1 | 3 |
 |  9 | 10 |   |
 |  0 |  1 | 3 |
 |  8 |  9 |   |
 |  0 |  1 | 3 |
 |  7 |  8 |   |
 |  0 |  1 | 3 |
 |  6 |  7 |   |
 |  0 |  1 | 3 |
 |  5 |  6 |   |
 |  0 |  1 | 3 |
 |  4 |  5 |   |
 |  0 |  1 | 3 |
 |  3 |  4 |   |
 |  0 |  1 | 3 |
 |  2 |  3 |   |
 |  0 |  1 | 3 |
 |  1 |  2 |   |
 |  0 |  1 | 3 |
 |  0 |  1 |   |

 #+BEGIN_SRC clojure :session cl-to-cloj :results output
(println (prepare-set-up-Tn-equivalent-Ys-with-X  '(0 1 3) '(0 1)))
 #+END_SRC

 #+RESULTS:
 : ((0 1 3) (0 1) (0 1 3) (11 0) (0 1 3) (10 11) (0 1 3) (9 10) (0 1 3) (8 9) (0 1 3) (7 8) (0 1 3) (6 7) (0 1 3) (5 6) (0 1 3) (4 5) (0 1 3) (3 4) (0 1 3) (2 3) (0 1 3) (1 2) (0 1 3) (0 1))

*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
;; (map reverse (partition 2 (set-up-tn-equivalent-ys-with-x '(0 1) '(0 1 3))))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj :results output
(println (set-up-Tn-equivalent-Ys-with-X  '(0 1 3) '(0 1)))
 #+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn set-up-Tn-equivalent-Ys-with-X [pcset1 pcset2]
(map reverse (partition 2 (prepare-set-up-tn-equivalent-Ys-with-X pcset1 pcset2))))
#+END_SRC

#+RESULTS:
: #'user/set-up-Tn-equivalent-Ys-with-X

 #+BEGIN_SRC clojure :session cl-to-cloj 
(set-up-Tn-equivalent-Ys-with-X  '(0 1 3) '(0 1))
 #+END_SRC

 #+RESULTS:
 | (0 1)   | (0 1 3) |
 | (11 0)  | (0 1 3) |
 | (10 11) | (0 1 3) |
 | (9 10)  | (0 1 3) |
 | (8 9)   | (0 1 3) |
 | (7 8)   | (0 1 3) |
 | (6 7)   | (0 1 3) |
 | (5 6)   | (0 1 3) |
 | (4 5)   | (0 1 3) |
 | (3 4)   | (0 1 3) |
 | (2 3)   | (0 1 3) |
 | (1 2)   | (0 1 3) |
 | (0 1)   | (0 1 3) |

 #+BEGIN_SRC clojure :session cl-to-cloj :results output
(println (set-up-Tn-equivalent-Ys-with-X  '(0 1 3) '(0 1)))
 #+END_SRC

 #+RESULTS:
 : (((0 1) (0 1 3)) ((11 0) (0 1 3)) ((10 11) (0 1 3)) ((9 10) (0 1 3)) ((8 9) (0 1 3)) ((7 8) (0 1 3)) ((6 7) (0 1 3)) ((5 6) (0 1 3)) ((4 5) (0 1 3)) ((3 4) (0 1 3)) ((2 3) (0 1 3)) ((1 2) (0 1 3)) ((0 1) (0 1 3)))

** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(defn createA-lewin-vector [[set1 set2]]
  (counting (flatten (rec-do-pc-compari set1 set2))))
 #+END_SRC

 #+RESULTS:
 : #'user/createA-lewin-vector

#+BEGIN_SRC clojure :session cl-to-cloj
(createA-lewin-vector '((0 1) (0 2)))
#+END_SRC

#+RESULTS:
| 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |

#+BEGIN_SRC clojure :session cl-to-cloj
(create-lewin-vector '(0 1) '(0 2))
#+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(defn create-straus-profile [set1 set2]
  (clean-profile (create-lewin-vector set1 set2)))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(defn create-straus-profile [set1 set2]
  (sort (flatten (rec-do-pc-compari set1 set2))))
 #+END_SRC

#+BEGIN_SRC clojure :session cl-to-cloj
(create-straus-profile '(0 1) '(0 2))
#+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(defn create-12-straus-profiles [set1 set2]
  (let [a (make-pairs-from-list (set-up-Tn-equivalent-Ys-with-X set1 set2))]
    (letfn [(rec [lst]
              (create-straus-profile (first lst) (second lst)))]
      (map rec a))))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(defn create-12-straus-profiles [set1 set2]
  (let [a (set-up-Tn-equivalent-Ys-with-X set1 set2)]
    (letfn [(rec [lst]
              (create-straus-profile (first lst) (second lst)))]
      (map rec a))))
 #+END_SRC

#+BEGIN_SRC clojure :session cl-to-cloj
(create-12-straus-profiles '(0 1) '(0 2))
#+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(overtone.core/rotate 1 [0 1 3 4])
 #+END_SRC
** 

#+BEGIN_SRC clojure :session cl-to-cloj
(defn rotate
  "Treat a list/vector as a circular data structure and rotate it by n
   places:

   (rotate 0  [1 2 3 4]) ;=> [1 2 3 4]
   (rotate 2  [1 2 3 4]) ;=> [3 4 1 2]
   (rotate -1 [1 2 3 4]) ;=> [4 1 2 3]

   Note, coll should be countable."
  [n coll]
  (let [size   (count coll)
        offset (mod n size)
        s      (cycle coll)
        s      (drop offset s)]
    (into [] (take size s))))
#+END_SRC

#+BEGIN_SRC clojure
(rotate 1 [0 1 3 4])
#+END_SRC

#+RESULTS:
| 1 | 3 | 4 | 0 |

*** 
 #+BEGIN_SRC clojure :session cl-to-cloj :results output
(source overtone.core/rotate)
 #+END_SRC

 #+RESULTS:
 #+begin_example
(defn rotate
  "Treat a list/vector as a circular data structure and rotate it by n
   places:

   (rotate 0  [1 2 3 4]) ;=> [1 2 3 4]
   (rotate 2  [1 2 3 4]) ;=> [3 4 1 2]
   (rotate -1 [1 2 3 4]) ;=> [4 1 2 3]

   Note, coll should be countable."
  [n coll]
  (let [size   (count coll)
        offset (mod n size)
        s      (cycle coll)
        s      (drop offset s)]
    (into [] (take size s))))
 #+end_example

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn all-rotations [lst]
(let [len (count lst)]
(for [n (range len)]
(rotate n lst))) )
#+END_SRC

#+RESULTS:
: #'user/all-rotations

#+BEGIN_SRC clojure :session cl-to-cloj
(all-rotations '(0 1 2 11))
#+END_SRC

#+RESULTS:
|  0 |  1 |  2 | 11 |
|  1 |  2 | 11 |  0 |
|  2 | 11 |  0 |  1 |
| 11 |  0 |  1 |  2 |

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn primer [ordered-set]
  (cond (empty? ordered-set) ()
        :else (cons (pc-compari (first ordered-set) (last ordered-set))
                    (primer (butlast ordered-set)))))
#+END_SRC

#+RESULTS:
: #'user/primer

#+BEGIN_SRC clojure :session cl-to-cloj
(primer '(11 0 1 2))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn prime-vector [ordered-set]
  (let [basic-vector (primer ordered-set)]
    (cons (first basic-vector) (butlast (reverse (butlast basic-vector))))))
#+END_SRC

#+RESULTS:
: #'user/prime-vector

#+BEGIN_SRC clojure :session cl-to-cloj
(prime-vector '(11 0 1 2))
#+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(Integer/parseInt (str 11 2 6 7))
 #+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn list-to-integer [lst-of-ints] (Integer/parseInt (apply str lst-of-ints)))
#+END_SRC

#+RESULTS:
: #'user/list-to-integer

#+BEGIN_SRC clojure :session cl-to-cloj
(list-to-integer '(11 2 6 7))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn positions
  [pred coll]
  (keep-indexed (fn [idx x]
                  (when (pred x)
                    idx))
                coll))
#+END_SRC

#+RESULTS:
: #'user/positions


#+BEGIN_SRC clojure :session cl-to-cloj
(positions #(= % 10) '(0 100 10 1000 10 100000))
#+END_SRC

#+RESULTS:
| 2 | 4 |

#+BEGIN_SRC clojure :session cl-to-cloj
(map inc (positions #(= % 10) '(0 100 10 1000 10 100000)))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn find-prime-form-from-list [ordered-pcset]
  (let [a (all-rotations ordered-pcset)
        b (map prime-vector a)
        c (map list-to-integer b)
        d (apply min c)]
    (nth a (first (positions #(= d %) c)))))
#+END_SRC

#+RESULTS:
: #'user/find-prime-form-from-list

#+BEGIN_SRC clojure :session cl-to-cloj
(find-prime-form-from-list '(0 1 5 6 8))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn set-to-zero [ordered-pcset]
  (let [n (first ordered-pcset)]
    (map (fn [x] (if (>= x n)
                   (- x n)
                   (- (+ 12 x) n)))
         ordered-pcset)))
#+END_SRC

#+RESULTS:
: #'user/set-to-zero

#+BEGIN_SRC clojure :session cl-to-cloj
(set-to-zero '(1 2 3 5))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn invert-mod12-pcset [pcset]
  (sort (mapcat mod12 (list (map #(- 12 %) pcset)))))
#+END_SRC

#+RESULTS:
: #'user/invert-mod12-pcset

#+BEGIN_SRC clojure :session cl-to-cloj
(invert-mod12-pcset '(0 3 7 10))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn forte-decision [pcset]
  (let [a (set-to-zero (find-prime-form-from-list pcset))]
    (list a (set-to-zero (find-prime-form-from-list (invert-mod12-pcset a))))))
#+END_SRC

#+RESULTS:
: #'user/forte-decision

#+BEGIN_SRC clojure :session cl-to-cloj
(map #'forte-decision '((0 1 5 6 8) (0 1 5 7 8) (0 2 3 6 7 9) (0 1 4 5 7 9) (0 1 3 5 8 9) (0 1 4 6 8 9) (0 1 2 5 6 7 9) (0 1 3 4 5 7 8 10)))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn another-forte [setx sety]
  (let [a setx b sety]
    (letfn [(rec [set1 set2]
              (cond (empty? set1) setx
                    (> (first set1) (first set2)) sety
                    (< (first set1) (first set2)) setx
                    :else (rec (rest set1) (rest set2))))]
      (rec a b))))
#+END_SRC

#+RESULTS:
: #'user/another-forte

#+BEGIN_SRC clojure :session cl-to-cloj
(another-forte ' (0 1 3 7 8) ' (0 1 5 7 8))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn forte-primeA [pcset]
  (let [a (forte-decision pcset)]
    (another-forte (first a) (second a))))
#+END_SRC

#+RESULTS:
: #'user/forte-primeA

#+BEGIN_SRC clojure :session cl-to-cloj
(forte-primeA ' (0 1 5 7 8))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn multiset-forte-primeA [mset]
(forte-primeA (distinct mset)))
#+END_SRC

#+RESULTS:
: #'user/multiset-forte-primeA

#+BEGIN_SRC clojure :session cl-to-cloj
(multiset-forte-primeA '(0 0 1 1 2 11))
#+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 1) '(0 1 2))]
  (make-pairs-from-list (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list))))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 1) '(0 1 2))]
  (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 1) '(0 1 2))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)]
  d)
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 1) '(0 1 2))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)]
e)
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 1) '(0 1 2))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))]
f)
 #+END_SRC
** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(defn comparing [mset-list]
  (let [canon (map #(apply + %) mset-list)]
    (list (apply min canon) canon)))
 #+END_SRC

 #+RESULTS:
 : #'user/comparing

#+BEGIN_SRC clojure :session cl-to-cloj
(comparing '((0 0 2 4 6 8 8 10 10) (0 2 4 6 6 8 8 10 10) (0 2 4 4 6 6 8 8 10) (0 2 2 4 4 6 6 8 10) (0 0 2 2 4 4 6 8 10) (0 0 2 2 4 6 8 10 10)))
#+END_SRC
** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn locate [x lat]
  (concat (list x) (map inc (positions #(= % x) lat))))
#+END_SRC

#+RESULTS:
: #'user/locate

#+BEGIN_SRC clojure :session cl-to-cloj
(locate '(0 1 3 4 6 7 9 10) '((0 1 3 4 6 7 9 10) (1 2 4 5 7 8 10 11) (0 2 3 5 6 8 9 11) (0 1 3 4 6 7 9 10) (1 2 4 5 7 8 10 11) (0 2 3 5 6 8 9 11) (0 1 3 4 6 7 9 10) (1 2 4 5 7 8 10 11) (0 2 3 5 6 8 9 11) (0 1 3 4 6 7 9 10) (1 2 4 5 7 8 10 11) (0 2 3 5 6 8 9 11) (1 2 4 5 7 8 10 11) (0 1 3 4 6 7 9 10) (0 2 3 5 6 8 9 11) (1 2 4 5 7 8 10 11) (0 1 3 4 6 7 9 10) (0 2 3 5 6 8 9 11) (1 2 4 5 7 8 10 11) (0 1 3 4 6 7 9 10) (0 2 3 5 6 8 9 11) (1 2 4 5 7 8 10 11) (0 1 3 4 6 7 9 10) (0 2 3 5 6 8 9 11)))
#+END_SRC

#+RESULTS:
| (0 1 3 4 6 7 9 10) | 1 | 4 | 7 | 10 | 14 | 17 | 20 | 23 |

** 
#+BEGIN_SRC clojure :session cl-to-cloj
(defn locating [mset-list]
  (let [chart (comparing mset-list)]
    (nth  mset-list (dec (second (locate (first chart) (second chart)))))))
#+END_SRC

#+RESULTS:
: #'user/locating

#+BEGIN_SRC clojure
(locating '((0 0 2 4 6 8 8 10 10) (0 2 4 6 6 8 8 10 10) (0 2 4 4 6 6 8 8 10) (0 2 2 4 4 6 6 8 10) (0 0 2 2 4 4 6 8 10) (0 0 2 2 4 6 8 10 10)))
#+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [element 10]
(concat (list element) (map inc (positions #(= % element) '(0 100 10 1000 10 100000)))))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
;;; not working yet, paren problem or more?

(defn imset-decision-maker [paired-list]
  (let (
	 a (make-pairs-from-list 
	     (set-up-Tn-equivalent-Ys-with-X (first paired-list) 
					     (second paired-list))))
	 b (map createA-lewin-vector a)
	 c (map reverse b)
	 d (append b c)
	 e (map clean-profile d) ; turns out CLEAN-PROFILE effectively creates a Straus-profile
	 f (multiset-forte-primeA (car e)) ; car because only need check the first one as they
					; all will represent the same forteprime (why, again?)
	 g (map remove-duplicates e)
	 h (locate f g)
	 i (loop for idx in (cdr h) ; must use cdr portion of LOCATE output--why this choice?
	       collect (nth (1- idx) e)) ;locate is not zero-indexed; lookup in straus profile
	 j (remove-duplicates i :test equal) ;; is this step, and all the rest based on j, needed?
    (if (<= (length i) 2)
	(if (apply <= (interleave (first i) (second i))
	    (first i)
	    (second i))
	(locating j))))
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 1) '(0 1 2))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))]
f)
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 1) '(0 1 2))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))
      g (distinct f)
      h (locate f g)]
h)
 #+END_SRC

 #+RESULTS:

*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 2 4) '(0 2 6))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))
      g (distinct f)]
f)
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
;;; incomplete syntax

(let [paired-list (list '(0 2 4) '(0 2 6))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))
      g (distinct f)
      h (locate f g)
      i (for [idx ]
h)]
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
;;; incomplete syntax

(let [paired-list (list '(0 2 4) '(0 2 6))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))
      g (map #(distinct %) e)]
g)
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 2 4) '(0 2 6))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))
      g (map #(distinct %) e)
      h (locate f g)]
h)
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 2 4) '(0 2 6))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))
      g (map #(distinct %) e)
      h (locate f g)
      i (for [idx (rest h)]
             (nth e (dec idx)))]
i)
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
(let [paired-list (list '(0 2 4) '(0 2 6))
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))
      g (map #(distinct %) e)
      h (locate f g)
      i (for [idx (rest h)]
             (nth e (dec idx)))
      j (map #(distinct %) i)]
j)
 #+END_SRC
*** 
 #+BEGIN_SRC clojure :session cl-to-cloj
;;; not working yet, paren problem or more?
;;;
(defn imset-decision-maker [paired-list]
  (let [
	 a (make-pairs-from-list 
	     (set-up-Tn-equivalent-Ys-with-X (first paired-list) 
					     (second paired-list))))
	 b (map createA-lewin-vector a)
	 c (map reverse b)
	 d (append b c)
	 e (map clean-profile d) ; turns out CLEAN-PROFILE effectively creates a Straus-profile
	 f (multiset-forte-primeA (car e)) ; car because only need check the first one as they
					; all will represent the same forteprime (why, again?)
	 g (map remove-duplicates e)
	 h (locate f g)
	 i (loop for idx in (cdr h) ; must use cdr portion of LOCATE output--why this choice?
	       collect (nth (1- idx) e)) ;locate is not zero-indexed; lookup in straus profile
	 j (remove-duplicates i :test equal) ;; is this step, and all the rest based on j, needed?
    (if (<= (length i) 2)
	(if (apply <= (interleave (first i) (second i)))
	    (first i)
	    (second i))
	(locating i)))
 #+END_SRC
** 
#+BEGIN_SRC clojure
(defn testim-z [x y] "test with sets x and y up to the final decision" 
(let [paired-list (list x y)
      b (map createA-lewin-vector (set-up-Tn-equivalent-Ys-with-X (first paired-list) (second paired-list)))
      c (reverse b)
      d (concat b c)
      e (map clean-profile d)
      f (multiset-forte-primeA (first e))
      g (map #(distinct %) e)
      h (locate f g)
      i (for [idx (rest h)]
             (nth e (dec idx)))
      j (map #(distinct %) i)]
  (if (<= (count i) 2)
    (if (apply <= (interleave (first i) (second i)))
      (first i)
      (second i))
    (locating i))))
#+END_SRC

#+RESULTS:
: #'user/testim-z

#+BEGIN_SRC clojure
(testim-z [0 1] [0 6])
#+END_SRC

#+RESULTS:
| 0 | 1 | 6 | 7 |

